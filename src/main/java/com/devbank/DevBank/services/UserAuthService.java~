package com.devbank.DevBank.services;

import com.devbank.DevBank.config.security.TokenService;
import com.devbank.DevBank.dtos.LoginDTO;
import com.devbank.DevBank.dtos.LoginVerifyDTO;
import com.devbank.DevBank.dtos.UserRegisterDTO;
import com.devbank.DevBank.entities.Account.Account;
import com.devbank.DevBank.entities.User.User;
import com.devbank.DevBank.entities.UserBlocked.UserBlocked;
import com.devbank.DevBank.entities.UserKeys.UserKeyType;
import com.devbank.DevBank.entities.UserKeys.UserKeys;
import com.devbank.DevBank.entities.VerifyUser.VerifyUser;
import com.devbank.DevBank.exeptions.*;
import com.devbank.DevBank.repositories.*;
import com.devbank.DevBank.ultilis.EmailType;
import org.apache.logging.log4j.util.InternalException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Service
public class UserAuthService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private EmailService emailService;

    @Autowired
    private UserKeysRepository userKeysRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private UserBlockedRepository userBlockedRepository;

    @Autowired
    private VerifyUserRepository verifyUserRepository;

    @Autowired
    private TokenService tokenService;

    private final Map<String, Integer> tentativas = new HashMap<>();

    public Map<String, String> userRegister(UserRegisterDTO data) {
        if (userRepository.findByEmail(data.getEmail()).isPresent()) {
            throw new EmailAlreadyRegisteredException("Emaill já resgistrado!");
        }

        if (userRepository.findByCpf(data.getCpf()).isPresent()) {
            throw new CpfAlreadyRegisteredException("Cpf já registrado!");
        }
        if (!data.getPassword().equals(data.getPasswordConfirmation())) {
            throw new PasswordsDoNotMatchException("As senhas não coincidem!");
        }


        String encriptedPassword = passwordEncoder.encode(data.getPassword());

        User newUser = new User(
                data.getName(),
                data.getEmail(),
                data.getCpf(),
                encriptedPassword
        );

        Account newUserAccount = new Account(newUser);

        Map<String, String> variables = new HashMap<>();
        variables.put("nome", newUser.getName());

        emailService.enviarEmailHtml(
                newUser.getEmail(),
                "Bem-vindo ao DevBank 🚀",
                EmailType.WELCOME,
                variables
        );
        userRepository.save(newUser);
        accountRepository.save(newUserAccount);


        UserKeys userKeysCpf = new UserKeys(newUserAccount, UserKeyType.CPF, newUser.getCpf());
        UserKeys userKeysMail = new UserKeys(newUserAccount, UserKeyType.EMAIL, newUser.getEmail());
        userKeysRepository.save(userKeysCpf);
        userKeysRepository.save(userKeysMail);

        Map<String, String> response = new HashMap<>();
        response.put("message", "Usuário registrado com sucesso!");
        return response;
    }


    public Map<String, String> loginUser(LoginDTO data) {
        User user = userRepository.findByEmailOrCpf(data.getEmailOrCpf(), data.getEmailOrCpf())
                .orElseThrow(() -> new UserNotFoundException("Usuário não encontrado, Email Ou Cpf Incorreto!"));

        Optional<UserBlocked> userBlockedOpt = userBlockedRepository.findByUser(user);
        if (userBlockedOpt.isPresent()) {
            UserBlocked blocked = userBlockedOpt.get();
            if (blocked.getUnlockedTime().isAfter(LocalDateTime.now())) {
                Duration dur = Duration.between(LocalDateTime.now(), blocked.getUnlockedTime());
                throw new AccountBlockedException("Conta bloqueada. Tente novamente em " + dur.toMinutes() + " minutos.");
            } else {
                userBlockedRepository.delete(blocked);
                tentativas.remove(user.getEmail());
            }
        }
        if (!passwordEncoder.matches(data.getPassword(), user.getPassword())) {
            int falhas = tentativas.getOrDefault(user.getEmail(), 0) + 1;
            tentativas.put(user.getEmail(), falhas);

            if (falhas >= 3) {
                UserBlocked userBlocked = new UserBlocked();
                userBlocked.setUser(user);
                userBlocked.setUnlockedTime(LocalDateTime.now().plusHours(1));
                userBlockedRepository.save(userBlocked);

                tentativas.remove(user.getEmail());
                Map<String, String> variables = new HashMap<>();
                variables.put("nome", user.getName());
                emailService.enviarEmailHtml(
                        user.getEmail(),
                        "Atividades Suspeitas Na sua Conta ⚠️",
                        EmailType.SUSPECT_ACTIVITY,
                        variables
                );
                throw new AccountBlockedException("Conta blonqueada por tentativas mal sucedidas. Emaill de alerta enviado.");
            }

            throw new IncorrectPasswordException("Senha incorreta. " + (3 - falhas) + " tentativa(s) restante(s).");
        }

        tentativas.remove(user.getEmail());

        Optional<VerifyUser> existingVerify = verifyUserRepository
                .findFirstByUserAndIsValidTrueOrderByCreatedAtDesc(user);

        if (existingVerify.isPresent() && existingVerify.get().getExpiresAt().isAfter(LocalDateTime.now())) {
            throw new VerifyCodeHasSendingException(
                    "Código de verificação já foi enviado. Verifique seu email ou pasta de spam."
            );
        }


        String token = generateCode();
        VerifyUser verifyUser = new VerifyUser();

        verifyUser.setUser(user);
        verifyUser.setToken(token);
        verifyUser.setExpiresAt(LocalDateTime.now().plusMinutes(10));
        verifyUserRepository.save(verifyUser);

        Map<String, String> variables = new HashMap<>();
        variables.put("nome", user.getName());
        variables.put("codigo", token);
        emailService.enviarEmailHtml(
                user.getEmail(),
                "2FA User Verify 🔏",
                EmailType.VERIFICATION_CODE,
                variables
        );

        return Map.of("message", "Código de verificação enviado");
    }

    public String generateCode() {
        return String.format("%06d", (int) (Math.random() * 1000000));
    }

    public Map<String, String> verifyCodeAndFinishLogin(LoginVerifyDTO data) {

        User user = userRepository.findByEmailOrCpf(data.getEmailOrCpf(), data.getEmailOrCpf())
                .orElseThrow(() -> new UserNotFoundException("Usuário não encontrado"));

        VerifyUser codigo = verifyUserRepository
                .findFirstByUserAndTokenAndIsValidTrueOrderByCreatedAtDesc(user, data.getToken())
                .orElseThrow(() -> new InvalidCodeException("Código de verificação inválido."));

        if (codigo.getExpiresAt().isBefore(LocalDateTime.now())) {
            throw new InvalidCodeException("Código expirado");
        }

        codigo.setIsValid(false);
        verifyUserRepository.save(codigo);

        String tokenJwt = tokenService.generateToken(user);

        Map<String, String> response = new HashMap<>();
        response.put("token", tokenJwt);
        response.put("message", "Bem-vindo(a), " + user.getName() + "!");
        return response;
    }

    public Map<String, String> resend2FACode(String credential) {
        User user = userRepository.findByEmailOrCpf(credential,credential)
                .orElseThrow(() -> new UserNotFoundException("Usuário não encontrado"));


        verifyUserRepository.invalidateAllByUserId(user.getId());
        String newCode = generateCode();

        VerifyUser newVerify = new VerifyUser();
        newVerify.setUser(user);
        newVerify.setToken(newCode);
        newVerify.setExpiresAt(LocalDateTime.now().plusMinutes(10));
        verifyUserRepository.saveAndFlush(newVerify);

        Map<String, String> variables = new HashMap<>();
        variables.put("nome", user.getName());
        variables.put("codigo", newCode);
        emailService.enviarEmailHtml(
                user.getEmail(),
                "2FA User Verify 🔏",
                EmailType.VERIFICATION_CODE,
                variables
        );

        return Map.of("message", "Código de verificação enviado");
    }

    public boolean verifyEmailOrCpf(String data){
        Optional<User> user = userRepository.findByEmailOrCpf(data,data);
        if(user.isPresent()){
            return true;
        }
        return false;
    }
}
